This file is part of MXE.
See index.html for further information.

Contains ad hoc patches for cross building.

From 9649882ecdad99f7ce25e10dca392c6b905285bf Mon Sep 17 00:00:00 2001
From: MXE
Date: Sun, 25 Oct 2015 08:57:36 -0400
Subject: [PATCH] Fix compiling with OpenSceneGraph 3.4.0.


diff --git a/simgear/canvas/elements/CanvasText.cxx b/simgear/canvas/elements/CanvasText.cxx
index 4b7600f..1a0d5a2 100644
--- a/simgear/canvas/elements/CanvasText.cxx
+++ b/simgear/canvas/elements/CanvasText.cxx
@@ -165,15 +165,29 @@ namespace canvas
 
     if( global_i == _begin )
       // before first character of line
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+      pos.x() = coords->at(_begin * 4).x();
+#else
       pos.x() = coords[_begin * 4].x();
+#endif
     else if( global_i == _end )
       // After Last character of line
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+      pos.x() = coords->at((_end - 1) * 4 + 2).x();
+#else
       pos.x() = coords[(_end - 1) * 4 + 2].x();
+#endif
     else
     {
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+      float prev_l = coords->at((global_i - 1) * 4).x(),
+            prev_r = coords->at((global_i - 1) * 4 + 2).x(),
+            cur_l = coords->at(global_i * 4).x();
+#else
       float prev_l = coords[(global_i - 1) * 4].x(),
             prev_r = coords[(global_i - 1) * 4 + 2].x(),
             cur_l = coords[global_i * 4].x();
+#endif
 
       if( prev_l == prev_r )
         // If previous character width is zero set to begin of next character
@@ -205,9 +219,15 @@ namespace canvas
     {
       // Get threshold for mouse x position for setting cursor before or after
       // current character
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+      float threshold = coords->at(i * 4).x()
+                      + HIT_FRACTION * glyphs[i]->getHorizontalAdvance()
+                                     * character_width;
+#else
       float threshold = coords[i * 4].x()
                       + HIT_FRACTION * glyphs[i]->getHorizontalAdvance()
                                      * character_width;
+#endif
 
       if( x <= threshold )
         break;
@@ -652,9 +672,15 @@ namespace canvas
         // osg::Vec2 lowRight = local+osg::Vec2(width+fHorizQuadMargin, ...);
         // osg::Vec2 upRight = local+osg::Vec2(width+fHorizQuadMargin, ...);
 
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+        float left = coords->at(i * 4).x(),
+              right = coords->at(i * 4 + 2).x(),
+              width = glyphs[i]->getWidth() * wr;
+#else
         float left = coords[i * 4].x(),
               right = coords[i * 4 + 2].x(),
               width = glyphs[i]->getWidth() * wr;
+#endif
 
         // (local + width + fHoriz) - (local - fHoriz) = width + 2*fHoriz | -width
         float margin = 0.5f * (right - left - width),
diff --git a/simgear/scene/material/Technique.cxx b/simgear/scene/material/Technique.cxx
index 93a17b8..40f8b9d 100644
--- a/simgear/scene/material/Technique.cxx
+++ b/simgear/scene/material/Technique.cxx
@@ -326,9 +326,15 @@ public:
             = GL2Extensions::Get(static_cast<unsigned>(contextId), true);
         if (!extensions)
             return;
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+        if (!extensions->isGlslSupported)
+            return;
+        value = extensions->glslLanguageVersion;
+#else
         if (!extensions->isGlslSupported())
             return;
         value = extensions->getLanguageVersion();
+#endif
     }
 };
 
@@ -357,7 +363,11 @@ public:
            = GL2Extensions::Get(static_cast<unsigned>(contextId), true);
        if (!extensions)
            return;
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+       value = extensions->isGlslSupported;
+#else
        value = extensions->isGlslSupported();
+#endif
    }
 };
 
diff --git a/simgear/scene/sky/CloudShaderGeometry.cxx b/simgear/scene/sky/CloudShaderGeometry.cxx
index 8b4ea16..5d47986 100644
--- a/simgear/scene/sky/CloudShaderGeometry.cxx
+++ b/simgear/scene/sky/CloudShaderGeometry.cxx
@@ -128,7 +128,11 @@ void CloudShaderGeometry::drawImplementation(RenderInfo& renderInfo) const
         sortData.frameSorted = frameNumber;
     }
     
-    const Extensions* extensions = getExtensions(state.getContextID(),true);
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+    const GLExtensions* extensions = GLExtensions::Get(state.getContextID(), true);
+#else
+    const Extensions* extensions = getExtensions(state.getContextID(), true);
+#endif
     GLfloat ua1[3] = { (GLfloat) alpha_factor,
                        (GLfloat) shade_factor,
                        (GLfloat) cloud_height };
diff --git a/simgear/scene/tgdb/ShaderGeometry.cxx b/simgear/scene/tgdb/ShaderGeometry.cxx
index 5d286c3..6e429c1 100644
--- a/simgear/scene/tgdb/ShaderGeometry.cxx
+++ b/simgear/scene/tgdb/ShaderGeometry.cxx
@@ -47,7 +47,11 @@ void ShaderGeometry::addObject(const Vec3& position, float scale,
 void ShaderGeometry::drawImplementation(osg::RenderInfo& renderInfo) const
 {
     State& state = *renderInfo.getState();
+#if OSG_VERSION_GREATER_OR_EQUAL(3, 4, 0)
+    const GLExtensions* extensions = GLExtensions::Get(state.getContextID(), true);
+#else
     const Extensions* extensions = getExtensions(state.getContextID(), true);
+#endif
     Vec4Array::const_iterator citer = _posScaleArray->begin();
     Vec4Array::const_iterator cend = _posScaleArray->end();
     FloatArray::const_iterator viter = _vertexAttribArray->begin();
-- 
2.5.0

